stages:
#  - test
  - compile
  - build
#  - cleanup

#before_script:
#  - export CLUSTER_NAME=htc-operator-test-$(echo $CI_COMMIT_SHA | head -c 6)
#  - export OS_AUTH_URL="https://keystone.cern.ch/main/v3"
#  - export OS_IDENTITY_API_VERSION="3"
#  - export OS_USERNAME="$COE_USER"
#  - export OS_PASSWORD=`echo $COE_PASS| sed 's/=/~/g'`
#  - export OS_PROJECT_NAME="CMS Analysis Recast effort"
#  - export OS_REGION_NAME="cern"
#  - export OS_DEFAULT_DOMAIN_NAME="default"
#  - export OS_TENANT_ID="cb60f871-095e-4628-8f1b-bcd127513ef8"
#  - export OS_TENANT_NAME="CMS Analysis Recast effort"

build_go_binary:
  stage: compile
  image: golang:1.13-buster
  script:
    - ls
    - export GO111MODULE=on
    - go mod download
    - echo 'Building static go binary ...'
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/bin/receiver cloudevents/receiver.go
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/bin/sender cloudevents/sender.go
    - curl -sSL 'https://download.docker.com/linux/static/stable/x86_64/docker-19.03.8.tgz'|tar xvzf -
    - export PATH="$PATH/`pwd`/docker"
    - ./ci/operator-sdk-build.sh
  artifacts:
    paths:
      - build

build_operator:
  stage: build
  image:
    # We recommend using the CERN version of the Kaniko image: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: [""]
  script:
    #- export DATE=`date -u +%Y.%m.%dT%H-%M-%SZ`
    # TAG will have a different value depending on what branch the docker image is built
    # If the branch is master TAG will be composed by the word "RELEASE" and the current date in UTC
    # If the branch is a feature branch TAG will be the name of that branch
    #- export TAG=${TAG:-"RELEASE".$DATE}
    - export TAG=latest
    - export CONTEXT=${CONTEXT:-$CI_PROJECT_DIR}
    - export DOCKERFILE_PATH=${DOCKERFILE_PATH:-Dockerfile}
    - |
      export DOCKERFILE=$CONTEXT/$DOCKERFILE_PATH
      if ! [ -f "$DOCKERFILE" ]; then
        echo 'Dockerfile not found, please set both CONTEXT and DOCKERFILE_PATH properly' >&2
        exit 1
      fi
    # Prepare Kaniko configuration file:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build and push the image from the Dockerfile at the root of the project.
    # To push to a specific docker tag, amend the --destination parameter, e.g. --destination $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME
    # See https://docs.gitlab.com/ee/ci/variables/predefined_variables.html#variables-reference for available variables
    - /kaniko/executor --context "$CONTEXT" --dockerfile "$CONTEXT/$DOCKERFILE_PATH" --destination "$CI_REGISTRY_IMAGE:$TAG" --build-arg CI_PROJECT_NAMESPACE="${CI_PROJECT_NAMESPACE}" --build-arg CI_PROJECT_NAME="${CI_PROJECT_NAME}"
  variables:
    DOCKERFILE_PATH: build/Dockerfile


#test k8s:
#  stage: test
#  image: gitlab-registry.cern.ch/cloud/ciadm
#  script:
#    - openstack coe cluster create ${CLUSTER_NAME} --keypair lxplus --cluster-template kubernetes-1.15.3-2 --node-count 1 --labels influx_grafana_dashboard_enabled=true --labels cephfs_csi_enabled=true --labels kube_csi_version=cern-csi-1.0-1 --labels cloud_provider_tag=v1.15.0 --labels container_infra_prefix=gitlab-registry.cern.ch/cloud/atomic-system-containers/ --labels manila_enabled=true --labels cgroup_driver=cgroupfs --labels autoscaler_tag=v1.15.2 --labels kube_csi_enabled=true --labels flannel_backend=vxlan --labels cvmfs_csi_version=v1.0.0 --labels admission_control_list=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,Priority --labels ingress_controller=traefik --labels manila_version=v0.3.0 --labels cvmfs_csi_enabled=true --labels heat_container_agent_tag=stein-dev-2 --labels kube_tag=v1.15.3 --labels cephfs_csi_version=cern-csi-1.0-1
#    - sleep 10
#    - STATUS=$(openstack coe cluster show $CLUSTER_NAME -c status | grep 'status ' | awk '{print $4}')
#    - while [ "$STATUS" != "CREATE_COMPLETE" ] && [ "$STATUS" != "CREATE_FAILED" ]; do STATUS=$(openstack coe cluster show $CLUSTER_NAME -c status | grep 'status ' | awk '{print $4}'); done
#    - openstack coe cluster show $CLUSTER_NAME
#    - openstack coe cluster config $CLUSTER_NAME
#    - export KUBECONFIG=config


#cleanup test clusters:
#  stage: cleanup
#  image: gitlab-registry.cern.ch/cloud/ciadm
#  script:
#    - openstack coe cluster show ${CLUSTER_NAME}; if [ $? -eq 0 ]; then openstack coe cluster delete ${CLUSTER_NAME} || true; fi
#    - sleep 5
#    - while openstack coe cluster show ${CLUSTER_NAME}; [ $? -eq 0 ]; do sleep 3; done
#  when: always
